#! /bin/bash
#   ____            _     _____ _     _____  #
#  | __ )  __ _ ___| |__ | ____| |   |  ___| #
#  |  _ \ / _` / __| '_ \|  _| | |   | |_    #
#  | |_) | (_| \__ \ | | | |___| |___|  _|   #
#  |____/ \__,_|___/_| |_|_____|_____|_|     #
#
#
########################## BashELF ############################
##                                                           ##
## A program to make binary executables written in pure bash ##
##                                                           ##
## Copyright Daniel Patrick Johnson @teknotus                ##
###############################################################

# command line option stuff goes here eventually
OUTFILE="a.out"

# boilerplate for
# ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux)

MAGICELF=$'\x7fELF'
ELF64=$'\x02'
LITTLEENDIAN=$'\x01'
ELFVERSION1=$'\x01'
LINUX=$'\x03'
ABIVERSION='\x00'
UNUSEDBYTES='\x00\x00\x00\x00\x00\x00\x00' # 7 unused bytes
EXECUTABLE='\x02\x00'
AMD64='\x3E\x00'
EVERSION1='\x01\x00\x00\x00'

# stdout main ELF header
header1(){
  echo -ne $MAGICELF$ELF64$LITTLEENDIAN$ELFVERSION1$LINUX$ABIVERSION
  echo -ne $UNUSEDBYTES$EXECUTABLE$AMD64$EVERSION1
}

# Program specific values
# Currently borrowed from an assembled, and stripped hello world
# to get readelf to parse

# Haven't found a good explanation for what ENTRY number should be
ENTRY='\xb0\x00\x40\x00\x00\x00\x00\x00'
PHOFF='\x40\x00\x00\x00\x00\x00\x00\x00'
SHOFF='\x00\x01\x00\x00\x00\x00\x00\x00'
FLAGS='\x00\x00\x00\x00'
EHSIZE='\x40\x00'
PHENTSIZE='\x38\x00'
PHNUM='\x01\x00'
SHENTSIZE='\x40\00'
SHNUM='\x01\x00'
SHSTRNDX='\x03\x00'

header2(){
  echo -ne $ENTRY$PHOFF$SHOFF$FLAGS$EHSIZE$PHENTSIZE$PHNUM
  echo -ne $SHENTSIZE$SHNUM$SHSTRNDX
}

# Got tired of hand creating hex escape strings
# this creates them in little endian
# arg1 number to format
# arg2 how many bytes in result

H(){
  local size=`echo "2 * $2" | bc`
  local hexnum=`printf "%0${size}x" $1`
  local hexsplit=`echo $hexnum | sed 's/\([a-f0-9]\{2\}\)/\1 /g'`
  local reversed=`echo $hexsplit | awk '{for (i=NF; i>0; i--) printf("\\\x%s",$i);}'`
  echo $reversed
}

# since they are globals I can arbitrarily change values, and
# they will make it into the output

ENTRY=`H 6000000 8`
SHOFF=`H 120 8`

header1 > $OUTFILE
header2 >> $OUTFILE

# program header values
PTNULL=`H 0 4`
PTLOAD=`H 1 4`
PH(){
  local ptype=`H 1 4`
  local flags=`H 5 4` #read execute
  local offset=`H 0 8`
  local vaddr=`H 4194304 8`
  local paddr=`H 4194304 8`
  local filesz=`H 210 8`
  local memsz=`H 210 8`
  local align=`H 2097152 8`
  echo -ne $ptype$flags$offset$vaddr$paddr$filesz$memsz$align
}

PH >> $OUTFILE

SHTYPENULL=0
SHTYPEPROGBITS=1
SHTYPESTRTAB=3

SH(){
  local name=`H 1 4`
  local shtype=`H $SHTYPEPROGBITS 4`
  local flags=`H 6 8`
  local addr=`H 4194480 8`
  local offset=`H 176 8`
  local size=`H 34 8`
  local link=`H 0 4`
  local info=`H 0 4`
  local addralign=`H 16 8`
  local entsize=`H 0 8`
  echo -ne $name$shtype$flags$addr$offset$size$link$info$addralign$entsize
}

SH >> $OUTFILE

STRINGTABLE='\x00.text\x00'
echo -ne $STRINGTABLE >> $OUTFILE
